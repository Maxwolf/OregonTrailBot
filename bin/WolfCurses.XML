<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WolfCurses</name>
    </assembly>
    <members>
        <member name="T:WolfCurses.IModule">
            <summary>
                The Module interface.
            </summary>
        </member>
        <member name="M:WolfCurses.IModule.Destroy">
            <summary>
                Fired when the simulation is closing and needs to clear out any data structures that it created so the program can
                exit cleanly.
            </summary>
        </member>
        <member name="T:WolfCurses.ITick">
            <summary>
                Used by simulation and all attached modes and their states. Allows them to receive ticks and understand the
                difference between a system tick that occurs unpredictably and a simulation tick which occurs at fixed intervals
                based on the tick delta of incoming system ticks adding up to whatever constant is set in the core simulation.
            </summary>
        </member>
        <member name="M:WolfCurses.ITick.OnTick(System.Boolean,System.Boolean)">
            <summary>
                Called when the simulation is ticked by underlying operating system, game engine, or potato. Each of these system
                ticks is called at unpredictable rates, however if not a system tick that means the simulation has processed enough
                of them to fire off event for fixed interval that is set in the core simulation by constant in milliseconds.
            </summary>
            <remarks>Default is one second or 1000ms.</remarks>
            <param name="systemTick">
                TRUE if ticked unpredictably by underlying operating system, game engine, or potato. FALSE if
                pulsed by game simulation at fixed interval.
            </param>
            <param name="skipDay">
                Determines if the simulation has force ticked without advancing time or down the trail. Used by
                special events that want to simulate passage of time without actually any actual time moving by.
            </param>
        </member>
        <member name="T:WolfCurses.Module">
            <summary>
                Base implementation of the IModule interface which allows for some overrides to be virtual so every implementation
                doesn't have to use them.
            </summary>
        </member>
        <member name="F:WolfCurses.Module._moduleCreated">
            <summary>
                Determines if the module has been created by the simulation.
            </summary>
        </member>
        <member name="M:WolfCurses.Module.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WolfCurses.Module" /> class.
            </summary>
        </member>
        <member name="M:WolfCurses.Module.Destroy">
            <summary>
                Fired when the simulation is closing and needs to clear out any data structures that it created so the program can
                exit cleanly.
            </summary>
        </member>
        <member name="M:WolfCurses.Module.OnTick(System.Boolean,System.Boolean)">
            <summary>
                Called when the simulation is ticked by underlying operating system, game engine, or potato. Each of these system
                ticks is called at unpredictable rates, however if not a system tick that means the simulation has processed enough
                of them to fire off event for fixed interval that is set in the core simulation by constant in milliseconds.
            </summary>
            <remarks>Default is one second or 1000ms.</remarks>
            <param name="systemTick">
                TRUE if ticked unpredictably by underlying operating system, game engine, or potato. FALSE if
                pulsed by game simulation at fixed interval.
            </param>
            <param name="skipDay">
                Determines if the simulation has force ticked without advancing time or down the trail. Used by
                special events that want to simulate passage of time without actually any actual time moving by.
            </param>
        </member>
        <member name="T:WolfCurses.InputManager">
            <summary>
                Deals with keep track of input to the simulation via whatever form that may end up taking. The default
                implementation is a text user interface (TUI) which allows for the currently accepted commands to be seen and only
                then accepted.
            </summary>
        </member>
        <member name="F:WolfCurses.InputManager.PRESSENTER">
            <summary>
                Holds a constant representation of the string telling the user to press enter key to continue so we don't repeat
                ourselves.
            </summary>
        </member>
        <member name="F:WolfCurses.InputManager._simUnit">
            <summary>
                Reference to simulation that is controlling the input manager.
            </summary>
        </member>
        <member name="F:WolfCurses.InputManager._commandQueue">
            <summary>
                Holds a series of commands that need to be executed in the order they come out of the collection.
            </summary>
        </member>
        <member name="M:WolfCurses.InputManager.#ctor(WolfCurses.SimulationApp)">
            <summary>
                Initializes a new instance of the <see cref="T:WolfCurses.InputManager" /> class.
            </summary>
            <param name="simUnit">Core simulation which is controlling the window manager.</param>
        </member>
        <member name="P:WolfCurses.InputManager.InputBuffer">
            <summary>
                Input buffer that we will use to hold characters until need to send them to simulation.
            </summary>
        </member>
        <member name="M:WolfCurses.InputManager.Destroy">
            <summary>
                Fired when the simulation is closing and needs to clear out any data structures that it created so the program can
                exit cleanly.
            </summary>
        </member>
        <member name="M:WolfCurses.InputManager.OnTick(System.Boolean,System.Boolean)">
            <summary>
                Called when the simulation is ticked by underlying operating system, game engine, or potato. Each of these system
                ticks is called at unpredictable rates, however if not a system tick that means the simulation has processed enough
                of them to fire off event for fixed interval that is set in the core simulation by constant in milliseconds.
            </summary>
            <remarks>Default is one second or 1000ms.</remarks>
            <param name="systemTick">
                TRUE if ticked unpredictably by underlying operating system, game engine, or potato. FALSE if
                pulsed by game simulation at fixed interval.
            </param>
            <param name="skipDay">
                Determines if the simulation has force ticked without advancing time or down the trail. Used by
                special events that want to simulate passage of time without actually any actual time moving by.
            </param>
        </member>
        <member name="M:WolfCurses.InputManager.SendInputBufferAsCommand">
            <summary>
                Clears the input buffer and submits whatever was in there to the simulation for processing. Implementation is left
                up the game simulation itself entirely.
            </summary>
        </member>
        <member name="M:WolfCurses.InputManager.OnCharacterAddedToInputBuffer(System.String)">
            <summary>
                Fired when the simulation receives an individual character from then input system. Depending on what it is we will
                do something, or not!
            </summary>
            <param name="addedKeyString">String character converted into a string representation of itself.</param>
        </member>
        <member name="M:WolfCurses.InputManager.AddCharToInputBuffer(System.Char)">
            <summary>
                Populates an internal input buffer for the simulation that is used to eventually return a possible command string
                to active game Windows.
            </summary>
            <param name="keyChar">The key Char.</param>
        </member>
        <member name="M:WolfCurses.InputManager.RemoveLastCharOfInputBuffer">
            <summary>
                Removes the last character from input buffer if greater than zero.
            </summary>
        </member>
        <member name="M:WolfCurses.InputManager.AddCommandToQueue(System.String)">
            <summary>
                Fired by messaging system or user interface that wants to interact with the simulation by sending string command
                that should be able to be parsed into a valid command that can be run on the current game Windows.
            </summary>
            <param name="returnedLine">Passed in command from controller, text was trimmed but nothing more.</param>
        </member>
        <member name="M:WolfCurses.InputManager.ClearBuffer">
            <summary>
                Removes any text data from the input buffer resetting it to an empty string again.
            </summary>
        </member>
        <member name="T:WolfCurses.Randomizer">
            <summary>
                Used for rolling the virtual dice in the simulation to determine the outcome of various events.
            </summary>
        </member>
        <member name="F:WolfCurses.Randomizer._random">
            <summary>
                Game logic objects.
            </summary>
        </member>
        <member name="M:WolfCurses.Randomizer.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WolfCurses.Randomizer" /> class.
                Initializes a new instance of the <see cref="T:TrailSimulation.Core.ModuleProduct" /> class.
            </summary>
        </member>
        <member name="P:WolfCurses.Randomizer.RandomSeed">
            <summary>
                Number used to seed the random number generator.
            </summary>
        </member>
        <member name="M:WolfCurses.Randomizer.Destroy">
            <summary>
                Fired when the simulation is closing and needs to clear out any data structures that it created so the program can
                exit cleanly.
            </summary>
        </member>
        <member name="M:WolfCurses.Randomizer.Next">
            <summary>
                C64 style RND with 0 would return clock timer 0 - 60 number so we do the same here for simulation.
            </summary>
            <returns>
                The <see cref="T:System.Int32" />.
            </returns>
        </member>
        <member name="M:WolfCurses.Randomizer.Next(System.Int32,System.Int32)">
            <summary>Returns a random number within a specified range.</summary>
            <returns>
                A 32-bit signed integer greater than or equal to <paramref name="minValue" /> and less than
                <paramref name="maxValue" />; that is, the range of return values includes <paramref name="minValue" /> but not
                <paramref name="maxValue" />. If <paramref name="minValue" /> equals <paramref name="maxValue" />,
                <paramref name="minValue" /> is returned.
            </returns>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">
                The exclusive upper bound of the random number returned. <paramref name="maxValue" /> must be
                greater than or equal to <paramref name="minValue" />.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <paramref name="minValue" /> is greater than
                <paramref name="maxValue" />.
            </exception>
        </member>
        <member name="M:WolfCurses.Randomizer.Next(System.Int32)">
            <summary>Returns a nonnegative random number less than the specified maximum.</summary>
            <returns>
                A 32-bit signed integer greater than or equal to zero, and less than <paramref name="maxValue" />; that is, the
                range of return values ordinarily includes zero but not <paramref name="maxValue" />. However, if
                <paramref name="maxValue" /> equals zero, <paramref name="maxValue" /> is returned.
            </returns>
            <param name="maxValue">
                The exclusive upper bound of the random number to be generated. <paramref name="maxValue" />
                must be greater than or equal to zero.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="maxValue" /> is less than zero.</exception>
        </member>
        <member name="M:WolfCurses.Randomizer.NextDouble">
            <summary>
                Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>
                A double-precision floating point number greater than or equal to 0.0, and less than 1.0.
            </returns>
        </member>
        <member name="M:WolfCurses.Randomizer.NextBytes(System.Byte[])">
            <summary>Fills the elements of a specified array of bytes with random numbers.</summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> is null.</exception>
        </member>
        <member name="M:WolfCurses.Randomizer.NextBool">
            <summary>
                Returns a random Boolean value.
            </summary>
            <returns>
                The <see cref="T:System.Boolean" />.
            </returns>
        </member>
        <member name="T:WolfCurses.SceneGraph">
            <summary>
                Provides base functionality for rendering out the simulation state via text user interface (TUI). This class has no
                idea about how other modules work and only serves to query them for string data which will be compiled into a
                console only view of the simulation which is intended to be the lowest level of visualization but theoretically
                anything could be a renderer for the simulation.
            </summary>
        </member>
        <member name="T:WolfCurses.SceneGraph.ScreenBufferDirty">
            <summary>
                Fired when the screen back buffer has changed from what is currently being shown, this forces a redraw.
            </summary>
        </member>
        <member name="F:WolfCurses.SceneGraph.GAMEMODE_DEFAULT_TUI">
            <summary>
                Default string used when game Windows has nothing better to say.
            </summary>
        </member>
        <member name="F:WolfCurses.SceneGraph.GAMEMODE_EMPTY_TUI">
            <summary>
                Default string used when there are no game modes at all.
            </summary>
        </member>
        <member name="F:WolfCurses.SceneGraph._simUnit">
            <summary>
                Reference to simulation that is controlling the text user interface and actually filling the screen buffer with
                data.
            </summary>
        </member>
        <member name="M:WolfCurses.SceneGraph.#ctor(WolfCurses.SimulationApp)">
            <summary>
                Initializes a new instance of the <see cref="T:WolfCurses.SceneGraph" /> class.
            </summary>
            <param name="simUnit">Core simulation which is controlling the window manager.</param>
        </member>
        <member name="P:WolfCurses.SceneGraph.ScreenBuffer">
            <summary>
                Holds the last known representation of the game simulation and current Windows text user interface, only pushes
                update
                when a change occurs.
            </summary>
        </member>
        <member name="M:WolfCurses.SceneGraph.Destroy">
            <summary>
                Fired when the simulation is closing and needs to clear out any data structures that it created so the program can
                exit cleanly.
            </summary>
        </member>
        <member name="M:WolfCurses.SceneGraph.OnTick(System.Boolean,System.Boolean)">
            <summary>
                Called when the simulation is ticked by underlying operating system, game engine, or potato. Each of these system
                ticks is called at unpredictable rates, however if not a system tick that means the simulation has processed enough
                of them to fire off event for fixed interval that is set in the core simulation by constant in milliseconds.
            </summary>
            <remarks>Default is one second or 1000ms.</remarks>
            <param name="systemTick">
                TRUE if ticked unpredictably by underlying operating system, game engine, or potato. FALSE if
                pulsed by game simulation at fixed interval.
            </param>
            <param name="skipDay">
                Determines if the simulation has force ticked without advancing time or down the trail. Used by
                special events that want to simulate passage of time without actually any actual time moving by.
            </param>
        </member>
        <member name="M:WolfCurses.SceneGraph.OnRender">
            <summary>
                Prints game Windows specific text and options.
            </summary>
            <returns>
                The text user interface that is the game simulation.<see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:WolfCurses.SceneGraph.RenderWindow">
            <summary>Prints game Windows specific text and options.</summary>
            <returns>The current window text to be rendered out.<see cref="T:System.String" />.</returns>
        </member>
        <member name="E:WolfCurses.SceneGraph.ScreenBufferDirtyEvent">
            <summary>
                Fired when the screen back buffer has changed from what is currently being shown, this forces a redraw.
            </summary>
        </member>
        <member name="M:WolfCurses.SceneGraph.Clear">
            <summary>
                Removes any and all data from the text user interface renderer.
            </summary>
        </member>
        <member name="T:WolfCurses.WindowManager">
            <summary>
                Builds up a list of game modes and their states using reflection and attributes. Contains methods to add game modes
                to running simulation. Can also remove modes and modify them further with states.
            </summary>
        </member>
        <member name="F:WolfCurses.WindowManager.formFactory">
            <summary>
                Keeps track of all the possible states a given game mode can have by using attributes and reflection to keep track
                of which user data object gets mapped to which particular state.
            </summary>
        </member>
        <member name="F:WolfCurses.WindowManager.windowFactory">
            <summary>
                Factory pattern that will create game modes for it based on attribute at the top of each one that defines what
                window type it is responsible for.
            </summary>
        </member>
        <member name="F:WolfCurses.WindowManager.windowList">
            <summary>
                Current list of all game modes, only the last one added gets ticked this is so game modes can attach things on-top
                of themselves like stores and trades.
            </summary>
        </member>
        <member name="M:WolfCurses.WindowManager.#ctor(WolfCurses.SimulationApp)">
            <summary>
                Initializes a new instance of the <see cref="T:WolfCurses.WindowManager" /> class.
                Initializes a new instance of the <see cref="T:TrailSimulation.Core.ModuleProduct" /> class.
            </summary>
            <param name="simUnit">Core simulation which is controlling the window manager.</param>
        </member>
        <member name="P:WolfCurses.WindowManager.FocusedWindow">
            <summary>
                References the current active game Windows, or the last attached game Windows in the simulation.
            </summary>
        </member>
        <member name="P:WolfCurses.WindowManager.Count">
            <summary>
                Retrieves the total number of windows that the manager is currently handling.
            </summary>
        </member>
        <member name="P:WolfCurses.WindowManager.AcceptingInput">
            <summary>
                Determines if this simulation is currently accepting input at all, the conditions for this require some game
                Windows
                to be attached and or active move to not be null.
            </summary>
        </member>
        <member name="M:WolfCurses.WindowManager.Destroy">
            <summary>
                Fired when the simulation is closing and needs to clear out any data structures that it created so the program can
                exit cleanly.
            </summary>
        </member>
        <member name="M:WolfCurses.WindowManager.OnTick(System.Boolean,System.Boolean)">
            <summary>
                Called when the simulation is ticked by underlying operating system, game engine, or potato. Each of these system
                ticks is called at unpredictable rates, however if not a system tick that means the simulation has processed enough
                of them to fire off event for fixed interval that is set in the core simulation by constant in milliseconds.
            </summary>
            <remarks>Default is one second or 1000ms.</remarks>
            <param name="systemTick">
                TRUE if ticked unpredictably by underlying operating system, game engine, or potato. FALSE if
                pulsed by game simulation at fixed interval.
            </param>
            <param name="skipDay">
                Determines if the simulation has force ticked without advancing time or down the trail. Used by
                special events that want to simulate passage of time without actually any actual time moving by.
            </param>
        </member>
        <member name="M:WolfCurses.WindowManager.CreateStateFromType(WolfCurses.IWindow,System.Type)">
            <summary>Creates and adds the specified type of state to currently active game Windows.</summary>
            <param name="parentMode">The parent Mode.</param>
            <param name="stateType">The state Type.</param>
            <returns>The <see cref="T:WolfCurses.Form.IForm" />.</returns>
        </member>
        <member name="M:WolfCurses.WindowManager.CleanWindows">
            <summary>
                Removes any and all inactive game modes that need to be removed from the simulation.
            </summary>
            <returns>
                TRUE if modes were removes, changing the active Windows or nulling it. FALSE if nothing changed because nothing
                was removed or no modes.
            </returns>
        </member>
        <member name="M:WolfCurses.WindowManager.OnWindowAdded">
            <summary>
                Tell all the other game modes that we added another Windows.
            </summary>
        </member>
        <member name="M:WolfCurses.WindowManager.Add(System.Type)">
            <summary>
                Creates and adds the specified game Windows to the simulation if it does not already exist in the list of
                modes.
            </summary>
            <param name="window">Enumeration value of the Windows which should be created.</param>
        </member>
        <member name="M:WolfCurses.WindowManager.Clear">
            <summary>
                Removes every window and form from the simulation and makes it a blank slate. Use with caution, if there is an
                operation in progress, or waiting for user input this will not respect that and just forcefully destroy everything.
            </summary>
        </member>
        <member name="T:WolfCurses.SimulationApp">
            <summary>
                Base simulation application class object. This class should not be declared directly but inherited by actual
                instance of game controller.
            </summary>
        </member>
        <member name="F:WolfCurses.SimulationApp.SHOW_COMMANDS">
            <summary>
                Determines if the dynamic menu system should show the command names or only numbers. If false then only numbers
                will be shown.
            </summary>
        </member>
        <member name="F:WolfCurses.SimulationApp.TICK_INTERVAL">
            <summary>
                Constant for the amount of time difference that should occur from last tick and current tick in milliseconds before
                the simulation logic will be ticked.
            </summary>
        </member>
        <member name="F:WolfCurses.SimulationApp._currentTickTime">
            <summary>
                Time and date of latest system tick, used to measure total elapsed time and tick simulation after each second.
            </summary>
        </member>
        <member name="F:WolfCurses.SimulationApp._lastTickTime">
            <summary>
                Last known time the simulation was ticked with logic and all sub-systems. This is not the same as a system tick
                which can happen hundreds of thousands of times a second or just a few, we only measure the difference in time on
                them.
            </summary>
        </member>
        <member name="F:WolfCurses.SimulationApp._spinningPixel">
            <summary>
                Spinning character pixel.
            </summary>
        </member>
        <member name="M:WolfCurses.SimulationApp.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:TrailGame.SimulationApp" /> class.
            </summary>
        </member>
        <member name="P:WolfCurses.SimulationApp.IsClosing">
            <summary>
                Determines if the simulation is currently closing down.
            </summary>
        </member>
        <member name="P:WolfCurses.SimulationApp.TickPhase">
            <summary>
                Shows the current status of the simulation visually as a spinning glyph, the purpose of which is to show that there
                is no hang in the simulation or logic controllers and everything is moving along and waiting for input or
                displaying something to user.
            </summary>
        </member>
        <member name="P:WolfCurses.SimulationApp.TotalSecondsTicked">
            <summary>
                Total number of ticks that have gone by from measuring system ticks, this means this measures the total number of
                seconds that have gone by using the pulses and time dilation without the use of dirty times that spawn more
                threads.
            </summary>
        </member>
        <member name="P:WolfCurses.SimulationApp.Random">
            <summary>
                Used for rolling the virtual dice in the simulation to determine the outcome of various events.
            </summary>
        </member>
        <member name="P:WolfCurses.SimulationApp.WindowManager">
            <summary>
                Keeps track of the currently attached game Windows, which one is active, and getting text user interface data.
            </summary>
        </member>
        <member name="P:WolfCurses.SimulationApp.InputManager">
            <summary>
                Handles input from the users keyboard, holds an input buffer and will push it to the simulation when return key is
                pressed.
            </summary>
        </member>
        <member name="P:WolfCurses.SimulationApp.SceneGraph">
            <summary>
                Shows the current state of the simulation as text only interface (TUI). Uses default constants if the attached
                Windows
                or state does not override this functionality and it is ticked.
            </summary>
        </member>
        <member name="P:WolfCurses.SimulationApp.AllowedWindows">
            <summary>
                Determines what windows the simulation will be capable of using and creating using the window managers factory.
            </summary>
        </member>
        <member name="M:WolfCurses.SimulationApp.OnTick(System.Boolean,System.Boolean)">
            <summary>
                Called when the simulation is ticked by underlying operating system, game engine, or potato. Each of these system
                ticks is called at unpredictable rates, however if not a system tick that means the simulation has processed enough
                of them to fire off event for fixed interval that is set in the core simulation by constant in milliseconds.
            </summary>
            <remarks>Default is one second or 1000ms.</remarks>
            <param name="systemTick">
                TRUE if ticked unpredictably by underlying operating system, game engine, or potato. FALSE if
                pulsed by game simulation at fixed interval.
            </param>
            <param name="skipDay">
                Determines if the simulation has force ticked without advancing time or down the trail. Used by
                special events that want to simulate passage of time without actually any actual time moving by.
            </param>
        </member>
        <member name="M:WolfCurses.SimulationApp.OnFirstTick">
            <summary>
                Fired when the ticker receives the first system tick event.
            </summary>
        </member>
        <member name="M:WolfCurses.SimulationApp.Destroy">
            <summary>
                Fired when the simulation is closing and needs to clear out any data structures that it created so the program can
                exit cleanly.
            </summary>
        </member>
        <member name="M:WolfCurses.SimulationApp.Restart">
            <summary>
                Creates and or clears data sets required for game simulation and attaches the travel menu and the main menu to make
                the program completely restarted as if fresh.
            </summary>
        </member>
        <member name="M:WolfCurses.SimulationApp.OnPreDestroy">
            <summary>
                Called when simulation is about to destroy itself, but right before it actually does it.
            </summary>
        </member>
        <member name="M:WolfCurses.SimulationApp.OnPreRender">
            <summary>
                Called by the text user interface scene graph renderer before it asks the active window to render itself out for
                display.
            </summary>
        </member>
        <member name="T:WolfCurses.ArrayExtensions">
            <summary>
                Helper methods for working with arrays.
            </summary>
        </member>
        <member name="M:WolfCurses.ArrayExtensions.TrueCount(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
                Determines the count of boolean values in an array that are true. Intended to be used in conjunction with count to
                determine if all are true for a entire sequence.
            </summary>
            <param name="booleans">Array of bool.</param>
            <returns>Number of bool values in array that were true.</returns>
            <remarks>http://stackoverflow.com/a/378282</remarks>
        </member>
        <member name="M:WolfCurses.ArrayExtensions.ClosestTo(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
                NB Method will return int. MaxValue for a sequence containing no elements. Intended to be used to match int value
                to enumeration but without directly casting it, instead looking for closest match to target value.
            </summary>
            <param name="collection">Enumerable collection of integers that make up our collection.</param>
            <param name="target">Target value which needs to be compared against collection values.</param>
            <returns>Int closest matching in collection to target value.</returns>
            <remarks>http://stackoverflow.com/a/10120982</remarks>
        </member>
        <member name="T:WolfCurses.AttributeExtensions">
            <summary>
                Meant for dealing with attributes and grabbing all the available classes of a given type with specified attribute
                using generics.
            </summary>
        </member>
        <member name="M:WolfCurses.AttributeExtensions.GetTypesWith``1(System.Boolean)">
            <summary>
                Find all the classes which have a custom attribute I've defined on them, and I want to be able to find them
                on-the-fly when an application is using my library.
            </summary>
            <param name="inherit">The inherit.</param>
            <remarks>http://stackoverflow.com/a/720171</remarks>
            <returns>The <see cref="!:IEnumerable" />.</returns>
        </member>
        <member name="M:WolfCurses.AttributeExtensions.IsImplementationOf(System.Type,System.Type)">
            <summary>Determine if a type implements a specific generic interface type.</summary>
            <param name="baseType">The base Type.</param>
            <param name="interfaceType">The interface Type.</param>
            <remarks>http://stackoverflow.com/a/503359</remarks>
            <returns>The <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="M:WolfCurses.AttributeExtensions.GetAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>Find the fields in an enum that have a specific attribute with a specific value.</summary>
            <param name="source">The source.</param>
            <param name="inherit">The inherit.</param>
            <returns>The <see cref="!:IEnumerable" />.</returns>
        </member>
        <member name="M:WolfCurses.AttributeExtensions.GetEnumAttribute``1(System.Enum)">
            <summary>Extension method for enum's that helps with getting custom attributes off of enum values</summary>
            <param name="enumValue">The enum Value.</param>
            <returns>The <see cref="!:T" />.</returns>
        </member>
        <member name="M:WolfCurses.AttributeExtensions.GetAttribute``1(System.Object)">
            <summary>Grabs first attribute from a given object and returns the first one in the enumeration.</summary>
            <typeparam name="T">Role of attribute that we should be looking for.</typeparam>
            <param name="value">Object that will have attribute tag specified in generic parameter..</param>
            <returns>Attribute of the specified type from inputted object.</returns>
        </member>
        <member name="M:WolfCurses.AttributeExtensions.ToDescriptionAttribute(System.Object)">
            <summary>Attempts to grab description attribute from any object.</summary>
            <param name="value">Object that should have description attribute.</param>
            <returns>Description attribute text, if null then type name without name space.</returns>
        </member>
        <member name="T:WolfCurses.EnumerableExtension">
            <summary>
                Collection of extension methods used for manipulating a enumerable collection of objects.
            </summary>
            <remarks>http://stackoverflow.com/a/2019433</remarks>
        </member>
        <member name="M:WolfCurses.EnumerableExtension.PickRandom``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Picks a random element from the list.</summary>
            <typeparam name="T">Type of list.</typeparam>
            <param name="source">Source collection.</param>
            <returns>Random element from list<see cref="!:T" />.</returns>
        </member>
        <member name="M:WolfCurses.EnumerableExtension.PickRandom``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>Picks a random element from the list.</summary>
            <typeparam name="T">Type of list.</typeparam>
            <param name="source">Source collection.</param>
            <param name="count">Total number of elements in the collection.</param>
            <returns>Shuffled list of elements<see cref="!:IEnumerable" />.</returns>
        </member>
        <member name="M:WolfCurses.EnumerableExtension.Shuffle``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Bubble sorts all the elements in the collection.</summary>
            <typeparam name="T">Type of list.</typeparam>
            <param name="source">Source collection.</param>
            <returns>Shuffled list of collection elements<see cref="!:IEnumerable" />.</returns>
        </member>
        <member name="T:WolfCurses.StringExtensions">
            <summary>
                Utility class that contains useful extension methods that make working with strings a little easier and less
                repetitive.
            </summary>
        </member>
        <member name="M:WolfCurses.StringExtensions.Truncate(System.String,System.Int32)">
            <summary>
                Cuts off a string given a certain input amount, useful for ensuring the user never enters more than possible into a
                given field.
            </summary>
            <param name="value">String that needs to be truncated to max length.</param>
            <param name="maxLength">Negative values will cause exception.</param>
            <returns>Truncated string.</returns>
        </member>
        <member name="M:WolfCurses.StringExtensions.WordWrap(System.String,System.Int32)">
            <summary>Word wraps the given text to fit within the specified width.</summary>
            <remarks>http://www.codeproject.com/Articles/51488/Implementing-Word-Wrap-in-C</remarks>
            <param name="text">Text to be word wrapped</param>
            <param name="width">
                Width, in characters, to which the text
                should be word wrapped
            </param>
            <returns>The modified text</returns>
        </member>
        <member name="M:WolfCurses.StringExtensions.BreakLine(System.String,System.Int32,System.Int32)">
            <summary>
                Locates position to break the given line so as to avoid
                breaking words.
            </summary>
            <param name="text">String that contains line of text</param>
            <param name="pos">Index where line of text starts</param>
            <param name="max">Maximum line length</param>
            <returns>The modified line length</returns>
        </member>
        <member name="T:WolfCurses.TypeExtensions">
            <summary>
                Helper class that deals with activating classes without using the actual activator class because that requires and
                empty parameterless constructor and we cannot always guarantee we will be able have one. Using these methods don't
                require a constructor to be used and furthermore the use of expressions to generate them ensures caching so penalty
                for type activation is only hit once on first instance creation.
            </summary>
        </member>
        <member name="M:WolfCurses.TypeExtensions.HasDefaultConstructor(System.Type)">
            <summary>
                FormatterServices.GetUninitializedObject(t) will fail for string. Hence special handling for string is
                in place to return empty string.
            </summary>
            <param name="t">The t.</param>
            <returns>The <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="T:WolfCurses.TypeExtensions.New`1">
            <summary>
                Create expression is effectively cached and incurs penalty only the first time the type is loaded. Will handle
                value types too in an efficient manner.
            </summary>
            <typeparam name="T"></typeparam>
            <remarks>http://stackoverflow.com/a/16162475</remarks>
            <example>MyType me = New`MyType`.Instance</example>
        </member>
        <member name="F:WolfCurses.TypeExtensions.New`1.Instance">
            <summary>
                The instance.
            </summary>
        </member>
        <member name="M:WolfCurses.TypeExtensions.New`1.Creator">
            <summary>
                The creator.
            </summary>
            <returns>
                The <see cref="!:Func" />.
            </returns>
        </member>
        <member name="T:WolfCurses.Control.MarqueeBar">
            <summary>
                Progress bar that is drawn in characters and is a ping-pong marquee action bouncing back and fourth.
            </summary>
        </member>
        <member name="F:WolfCurses.Control.MarqueeBar.bar">
            <summary>
                The bar.
            </summary>
        </member>
        <member name="F:WolfCurses.Control.MarqueeBar.blankPointer">
            <summary>
                The blank pointer.
            </summary>
        </member>
        <member name="F:WolfCurses.Control.MarqueeBar.counter">
            <summary>
                The counter.
            </summary>
        </member>
        <member name="F:WolfCurses.Control.MarqueeBar.currdir">
            <summary>
                The current directory.
            </summary>
        </member>
        <member name="F:WolfCurses.Control.MarqueeBar.pointer">
            <summary>
                The pointer.
            </summary>
        </member>
        <member name="M:WolfCurses.Control.MarqueeBar.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WolfCurses.Control.MarqueeBar" /> class.
            </summary>
        </member>
        <member name="M:WolfCurses.Control.MarqueeBar.BlankPointer">
            <summary>
                sets the attribute blankPointer with a empty string the same length that the pointer
            </summary>
            <returns>A string filled with space characters</returns>
        </member>
        <member name="M:WolfCurses.Control.MarqueeBar.ClearBar">
            <summary>
                reset the bar to its original state
            </summary>
        </member>
        <member name="M:WolfCurses.Control.MarqueeBar.PlacePointer(System.Int32,System.Int32)">
            <summary>remove the previous pointer and place it in a new position</summary>
            <param name="start">start index</param>
            <param name="end">end index</param>
        </member>
        <member name="M:WolfCurses.Control.MarqueeBar.Step">
            <summary>
                prints the progress bar according to pointers and current Direction
            </summary>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="T:WolfCurses.Control.MarqueeBar.Direction">
            <summary>
                The direction.
            </summary>
        </member>
        <member name="F:WolfCurses.Control.MarqueeBar.Direction.Right">
            <summary>
                The right.
            </summary>
        </member>
        <member name="F:WolfCurses.Control.MarqueeBar.Direction.Left">
            <summary>
                The left.
            </summary>
        </member>
        <member name="T:WolfCurses.Control.SpinningPixel">
            <summary>
                Old school spinning pixel progress, normally used to show the thread is not locked by some running process.
            </summary>
        </member>
        <member name="F:WolfCurses.Control.SpinningPixel.animation">
            <summary>
                The animation.
            </summary>
        </member>
        <member name="F:WolfCurses.Control.SpinningPixel.counter">
            <summary>
                The counter.
            </summary>
        </member>
        <member name="M:WolfCurses.Control.SpinningPixel.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WolfCurses.Control.SpinningPixel" /> class.
            </summary>
        </member>
        <member name="M:WolfCurses.Control.SpinningPixel.Step">
            <summary>
                prints the character found in the animation according to the current index
            </summary>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="T:WolfCurses.Control.TextProgress">
            <summary>
                Text manipulation utilities for dealing with displaying progress visually as text in a console application.
            </summary>
        </member>
        <member name="M:WolfCurses.Control.TextProgress.DrawProgressBar(System.Int32,System.Int32,System.Int32)">
            <summary>
                Creates text progress bar based on input parameters at specified value with inputted character as progress
                character.
            </summary>
            <param name="value">Current value of the progress bar, should with within range of max value.</param>
            <param name="maxValue">Maximum value that the progress bar can be.</param>
            <param name="barSize">Total size of the progress bar.</param>
            <returns>The <see cref="T:System.String" />.</returns>
        </member>
        <member name="T:WolfCurses.Control.TextTableExtensions">
            <summary>
                Converts lists of objects into string table representations of themselves.
            </summary>
        </member>
        <member name="M:WolfCurses.Control.TextTableExtensions.ToStringTable``1(System.Collections.Generic.IEnumerable{``0},System.String[],System.Func{``0,System.Object}[])">
            <summary>The to string table.</summary>
            <param name="values">The values.</param>
            <param name="columnHeaders">The column headers.</param>
            <param name="valueSelectors">The value selectors.</param>
            <typeparam name="T"></typeparam>
            <returns>The <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:WolfCurses.Control.TextTableExtensions.ToStringTable``1(``0[],System.String[],System.Func{``0,System.Object}[])">
            <summary>The to string table.</summary>
            <param name="values">The values.</param>
            <param name="columnHeaders">The column headers.</param>
            <param name="valueSelectors">The value selectors.</param>
            <typeparam name="T"></typeparam>
            <returns>The <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:WolfCurses.Control.TextTableExtensions.ToStringTable(System.String[0:,0:])">
            <summary>The to string table.</summary>
            <param name="arrValues">The arr values.</param>
            <returns>The <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:WolfCurses.Control.TextTableExtensions.GetMaxColumnsWidth(System.String[0:,0:])">
            <summary>The get max columns width.</summary>
            <param name="arrValues">The arr values.</param>
            <returns>The <see cref="!:int[]" />.</returns>
        </member>
        <member name="M:WolfCurses.Control.TextTableExtensions.ToStringTable``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>The to string table.</summary>
            <param name="values">The values.</param>
            <param name="valueSelectors">The value selectors.</param>
            <typeparam name="T"></typeparam>
            <returns>The <see cref="T:System.String" />.</returns>
        </member>
        <member name="M:WolfCurses.Control.TextTableExtensions.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>The get property.</summary>
            <param name="expresstion">The expression.</param>
            <typeparam name="T"></typeparam>
            <returns>The <see cref="T:System.Reflection.PropertyInfo" />.</returns>
        </member>
        <member name="T:WolfCurses.Form.Form`1">
            <summary>Forms are attached to windows.</summary>
            <typeparam name="TData">UserData type.</typeparam>
        </member>
        <member name="M:WolfCurses.Form.Form`1.#ctor(WolfCurses.IWindow)">
            <summary>
                Initializes a new instance of the <see cref="T:WolfCurses.Form.Form`1" /> class.
                This constructor will be used by the other one
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="P:WolfCurses.Form.Form`1.UserData">
            <summary>
                Intended to be overridden in abstract class by generics to provide method to return object that contains all the
                data for parent game Windows.
            </summary>
        </member>
        <member name="P:WolfCurses.Form.Form`1.ParentWindow">
            <summary>
                Current parent game Windows which this state is binded to and is doing work on behalf of.
            </summary>
        </member>
        <member name="M:WolfCurses.Form.Form`1.CompareTo(WolfCurses.Form.Form{`0})">
            <summary>Compares the current object with another object of the same type.</summary>
            <returns>
                A value that indicates the relative order of the objects being compared. The return value has the following
                meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This
                object is equal to <paramref name="other" />. Greater than zero This object is greater than
                <paramref name="other" />.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:WolfCurses.Form.Form`1.Equals(WolfCurses.Form.Form{`0},WolfCurses.Form.Form{`0})">
            <summary>Determines whether the specified objects are equal.</summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:WolfCurses.Form.Form`1.GetHashCode(WolfCurses.Form.Form{`0})">
            <summary>Returns a hash code for the specified object.</summary>
            <returns>A hash code for the specified object.</returns>
            <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
            <exception cref="T:System.ArgumentNullException">
                The type of <paramref name="obj" /> is a reference type and
                <paramref name="obj" /> is null.
            </exception>
        </member>
        <member name="M:WolfCurses.Form.Form`1.Equals(WolfCurses.Form.Form{`0})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="P:WolfCurses.Form.Form`1.WolfCurses#Form#IForm#UserData">
            <summary>
                Intended to be overridden in abstract class by generics to provide method to return object that contains all the
                data for parent game Windows.
            </summary>
        </member>
        <member name="P:WolfCurses.Form.Form`1.InputFillsBuffer">
            <summary>
                Determines if user input is currently allowed to be typed and filled into the input buffer.
            </summary>
            <remarks>Default is FALSE. Setting to TRUE allows characters and input buffer to be read when submitted.</remarks>
        </member>
        <member name="P:WolfCurses.Form.Form`1.AllowInput">
            <summary>
                Determines if this dialog state is allowed to receive any input at all, even empty line returns. This is useful for
                preventing the player from leaving a particular dialog until you are ready or finished processing some data.
            </summary>
        </member>
        <member name="M:WolfCurses.Form.Form`1.OnRenderForm">
            <summary>
                Returns a text only representation of the current game Windows state. Could be a statement, information, question
                waiting input, etc.
            </summary>
            <returns>
                The text user interface.<see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:WolfCurses.Form.Form`1.OnInputBufferReturned(System.String)">
            <summary>Fired when the game Windows current state is not null and input buffer does not match any known command.</summary>
            <param name="input">Contents of the input buffer which didn't match any known command in parent game Windows.</param>
        </member>
        <member name="M:WolfCurses.Form.Form`1.OnFormPostCreate">
            <summary>
                Fired after the state has been completely attached to the simulation letting the state know it can browse the user
                data and other properties below it.
            </summary>
        </member>
        <member name="M:WolfCurses.Form.Form`1.OnFormActivate">
            <summary>
                Fired when the window is activated and or refocused after another window was removed from being on-top of it.
                Useful for re-initializing form data after something like a random event runs which might kill people or alter the
                vehicle inventory.
            </summary>
        </member>
        <member name="M:WolfCurses.Form.Form`1.Compare(WolfCurses.Form.IForm,WolfCurses.Form.IForm)">
            <summary>
                Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the
                other.
            </summary>
            <returns>
                A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in
                the following table.Value Meaning Less than zero<paramref name="x" /> is less than <paramref name="y" />.Zero
                <paramref name="x" /> equals <paramref name="y" />.Greater than zero<paramref name="x" /> is greater than
                <paramref name="y" />.
            </returns>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
        </member>
        <member name="M:WolfCurses.Form.Form`1.CompareTo(WolfCurses.Form.IForm)">
            <summary>Compares the current object with another object of the same type.</summary>
            <returns>
                A value that indicates the relative order of the objects being compared. The return value has the following
                meanings: Value Meaning Less than zero This object is less than the <paramref name="other" /> parameter.Zero This
                object is equal to <paramref name="other" />. Greater than zero This object is greater than
                <paramref name="other" />.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:WolfCurses.Form.Form`1.OnTick(System.Boolean,System.Boolean)">
            <summary>
                Called when the simulation is ticked by underlying operating system, game engine, or potato. Each of these system
                ticks is called at unpredictable rates, however if not a system tick that means the simulation has processed enough
                of them to fire off event for fixed interval that is set in the core simulation by constant in milliseconds.
            </summary>
            <remarks>Default is one second or 1000ms.</remarks>
            <param name="systemTick">
                TRUE if ticked unpredictably by underlying operating system, game engine, or potato. FALSE if
                pulsed by game simulation at fixed interval.
            </param>
            <param name="skipDay">
                Determines if the simulation has force ticked without advancing time or down the trail. Used by
                special events that want to simulate passage of time without actually any actual time moving by.
            </param>
        </member>
        <member name="M:WolfCurses.Form.Form`1.SetForm(System.Type)">
            <summary>Creates and adds the specified type of state to currently active game Windows.</summary>
            <param name="stateType">The state Type.</param>
        </member>
        <member name="M:WolfCurses.Form.Form`1.ClearForm">
            <summary>
                Removes the current state from the active game Windows.
            </summary>
        </member>
        <member name="M:WolfCurses.Form.Form`1.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns>
                A string that represents the current object.
            </returns>
        </member>
        <member name="M:WolfCurses.Form.Form`1.Compare(WolfCurses.Form.Form{`0},WolfCurses.Form.Form{`0})">
            <summary>
                When overridden in a derived class, performs a comparison of two objects of the same type and returns a value
                indicating whether one object is less than, equal to, or greater than the other.
            </summary>
            <returns>
                A signed integer that indicates the relative values of <paramref name="x" /> and <paramref name="y" />, as shown in
                the following table.Value Meaning Less than zero <paramref name="x" /> is less than <paramref name="y" />.Zero
                <paramref name="x" /> equals <paramref name="y" />.Greater than zero <paramref name="x" /> is greater than
                <paramref name="y" />.
            </returns>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
        </member>
        <member name="M:WolfCurses.Form.Form`1.GetHashCode">
            <summary>
                Serves as a hash function for a particular type.
            </summary>
            <returns>
                A hash code for the current <see cref="T:System.Object" />.
            </returns>
        </member>
        <member name="T:WolfCurses.Form.FormFactory">
            <summary>
                Keeps track of all the possible states a given game Windows can have by using attributes and reflection to keep
                track of which user data object gets mapped to which particular state.
            </summary>
        </member>
        <member name="M:WolfCurses.Form.FormFactory.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:WolfCurses.Form.FormFactory" /> class.
            </summary>
        </member>
        <member name="P:WolfCurses.Form.FormFactory.LoadedForms">
            <summary>
                Reference dictionary for all the reflected state types.
            </summary>
        </member>
        <member name="M:WolfCurses.Form.FormFactory.CreateStateFromType(System.Type,WolfCurses.IWindow)">
            <summary>Creates and adds the specified type of state to currently active game Windows.</summary>
            <param name="stateType">Role object that is the actual type of state that needs created.</param>
            <param name="activeMode">Current active game Windows passed to factory so no need to call game simulation singleton.</param>
            <returns>Created state instance from reference types build on startup.</returns>
        </member>
        <member name="M:WolfCurses.Form.FormFactory.Destroy">
            <summary>
                Called when primary simulation is closing down.
            </summary>
        </member>
        <member name="T:WolfCurses.Form.IForm">
            <summary>
                Defines interface for game mode state which can show data, accept input, add new game modes, set new state, and
                have user data custom per implementation.
            </summary>
        </member>
        <member name="P:WolfCurses.Form.IForm.InputFillsBuffer">
            <summary>
                Determines if user input is currently allowed to be typed and filled into the input buffer.
            </summary>
            <remarks>Default is FALSE. Setting to TRUE allows characters and input buffer to be read when submitted.</remarks>
        </member>
        <member name="P:WolfCurses.Form.IForm.AllowInput">
            <summary>
                Determines if this dialog state is allowed to receive any input at all, even empty line returns. This is useful for
                preventing the player from leaving a particular dialog until you are ready or finished processing some data.
            </summary>
        </member>
        <member name="P:WolfCurses.Form.IForm.UserData">
            <summary>
                Intended to be overridden in abstract class by generics to provide method to return object that contains all the
                data for parent game Windows.
            </summary>
        </member>
        <member name="M:WolfCurses.Form.IForm.OnRenderForm">
            <summary>
                Returns a text only representation of the current game Windows state. Could be a statement, information, question
                waiting input, etc.
            </summary>
            <returns>
                The text user interface.<see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:WolfCurses.Form.IForm.OnInputBufferReturned(System.String)">
            <summary>Fired when the game Windows current state is not null and input buffer does not match any known command.</summary>
            <param name="input">Contents of the input buffer which didn't match any known command in parent game Windows.</param>
        </member>
        <member name="M:WolfCurses.Form.IForm.OnFormPostCreate">
            <summary>
                Fired after the state has been completely attached to the simulation letting the state know it can browse the user
                data and other properties below it.
            </summary>
        </member>
        <member name="M:WolfCurses.Form.IForm.OnFormActivate">
            <summary>
                Fired when the window is activated and or refocused after another window was removed from being on-top of it.
                Useful for re-initializing form data after something like a random event runs which might kill people or alter the
                vehicle inventory.
            </summary>
        </member>
        <member name="T:WolfCurses.Form.Input.DialogResponse">
            <summary>
                Used by game Windows state prefab to determine what the response was to a particular dialog prompt.
            </summary>
        </member>
        <member name="F:WolfCurses.Form.Input.DialogResponse.No">
            <summary>
                User indicated their reply to the prompt was NO in one form or another.
            </summary>
        </member>
        <member name="F:WolfCurses.Form.Input.DialogResponse.Yes">
            <summary>
                User indicated their reply to the prompt was YES in one form or another.
            </summary>
        </member>
        <member name="F:WolfCurses.Form.Input.DialogResponse.Custom">
            <summary>
                No response was given, only a blank command meaning the user is trying to continue.
            </summary>
        </member>
        <member name="T:WolfCurses.Form.Input.DialogType">
            <summary>
                Determines what type of dialog this will be, as in should it just display a message and wait for any input before
                firing response method.
            </summary>
        </member>
        <member name="F:WolfCurses.Form.Input.DialogType.Prompt">
            <summary>
                Dialog will only display the message prompt and not ask for any input and instead ask the user to press RETURN KEY
                to continue. Used when you need to just tell the user something like a pop-up.
            </summary>
        </member>
        <member name="F:WolfCurses.Form.Input.DialogType.YesNo">
            <summary>
                Dialog will accept only YES or NO answer and nothing else, if the user enters invalid data then it will be ignored
                until a valid response is given by the user.c
            </summary>
        </member>
        <member name="F:WolfCurses.Form.Input.DialogType.Custom">
            <summary>
                Dialog will accept either YES or NO response, if neither are received then it will process it as a cancel or
                continue method. Up to implementation to deal with it at this point.
            </summary>
        </member>
        <member name="T:WolfCurses.Form.Input.InputForm`1">
            <summary>
                Represents a dialog box that acts like a pop-up where it displays some piece of data, accepts any key for input and
                then closes.
            </summary>
            <typeparam name="T">Windows information object that will be applied to this state on when constructor is called.</typeparam>
        </member>
        <member name="F:WolfCurses.Form.Input.InputForm`1._prompt">
            <summary>
                Reference for all the text we will display for user to read when the state is activated.
            </summary>
        </member>
        <member name="F:WolfCurses.Form.Input.InputForm`1._seenPrompt">
            <summary>
                Keeps track if the player is done looking at this dialog prompt.
            </summary>
        </member>
        <member name="M:WolfCurses.Form.Input.InputForm`1.#ctor(WolfCurses.IWindow)">
            <summary>
                Initializes a new instance of the <see cref="T:WolfCurses.Form.Input.InputForm`1" /> class.
                This constructor will be used by the other one
            </summary>
            <param name="window">The window.</param>
        </member>
        <member name="P:WolfCurses.Form.Input.InputForm`1.DialogType">
            <summary>
                Defines what type of dialog this will act like depending on this enumeration value. Up to implementation to define
                desired behavior.
            </summary>
        </member>
        <member name="P:WolfCurses.Form.Input.InputForm`1.InputFillsBuffer">
            <summary>
                Determines if user input is currently allowed to be typed and filled into the input buffer.
            </summary>
            <remarks>Default is FALSE. Setting to TRUE allows characters and input buffer to be read when submitted.</remarks>
        </member>
        <member name="M:WolfCurses.Form.Input.InputForm`1.OnFormPostCreate">
            <summary>
                Fired after the state has been completely attached to the simulation letting the state know it can browse the user
                data and other properties below it.
            </summary>
        </member>
        <member name="M:WolfCurses.Form.Input.InputForm`1.OnDialogPrompt">
            <summary>
                Fired when dialog prompt is attached to active game Windows and would like to have a string returned.
            </summary>
            <returns>
                The dialog prompt text.<see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:WolfCurses.Form.Input.InputForm`1.OnRenderForm">
            <summary>
                Returns a text only representation of the current game Windows state. Could be a statement, information, question
                waiting input, etc.
            </summary>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:WolfCurses.Form.Input.InputForm`1.OnInputBufferReturned(System.String)">
            <summary>Fired when the game Windows current state is not null and input buffer does not match any known command.</summary>
            <param name="input">Contents of the input buffer which didn't match any known command in parent game Windows.</param>
        </member>
        <member name="M:WolfCurses.Form.Input.InputForm`1.OnDialogResponse(WolfCurses.Form.Input.DialogResponse)">
            <summary>
                Fired when the dialog receives favorable input and determines a response based on this. From this method it is
                common to attach another state, or remove the current state based on the response.
            </summary>
            <param name="reponse">The response the dialog parsed from simulation input buffer.</param>
        </member>
        <member name="T:WolfCurses.Form.ParentWindowAttribute">
            <summary>
                Used to map game Windows states to their respective parent modes by Windows type enumeration value. All of this is
                done
                by the state factory which is called by the base simulation whom also keeps track of all the game modes in similar
                manner. After startup we will add to that data by telling what possible states may exist for a particular game
                Windows
                and what user data IModeInfo object will be created.
            </summary>
        </member>
        <member name="M:WolfCurses.Form.ParentWindowAttribute.#ctor(System.Type)">
            <summary>Initializes a new instance of the <see cref="T:WolfCurses.Form.ParentWindowAttribute" /> class.</summary>
            <param name="parentWindow">The parent Window.</param>
        </member>
        <member name="P:WolfCurses.Form.ParentWindowAttribute.ParentWindow">
            <summary>
                Defines what the parent game mode of this particular state should be.
            </summary>
        </member>
        <member name="T:WolfCurses.IWindow">
            <summary>
                Underlying game Windows interface, used by base simulation to keep track of what data should currently have control
                over the simulation details. Only top most game Windows will ever be ticked.
            </summary>
        </member>
        <member name="P:WolfCurses.IWindow.ShouldRemoveMode">
            <summary>
                Determines if the game Windows should not be ticked if it is active but instead removed. The Windows when set to
                being
                removed will not actually be removed until the simulation attempts to tick it and realizes that this is set to true
                and then it will be removed.
            </summary>
        </member>
        <member name="P:WolfCurses.IWindow.AcceptsInput">
            <summary>
                Determines if user input is currently allowed to be typed and filled into the input buffer.
            </summary>
            <remarks>Default is FALSE. Setting to TRUE allows characters and input buffer to be read when submitted.</remarks>
        </member>
        <member name="P:WolfCurses.IWindow.CurrentForm">
            <summary>
                Holds the current state which this Windows is in, a Windows will cycle through available states until it is
                finished and
                then detach.
            </summary>
        </member>
        <member name="P:WolfCurses.IWindow.UserData">
            <summary>
                Intended to be overridden in abstract class by generics to provide method to return object that contains all the
                data for parent game Windows.
            </summary>
        </member>
        <member name="M:WolfCurses.IWindow.SetForm(System.Type)">
            <summary>Creates and adds the specified type of state to currently active game Windows.</summary>
            <param name="stateType">The state Type.</param>
        </member>
        <member name="M:WolfCurses.IWindow.ClearForm">
            <summary>
                Removes the current state from the active game Windows.
            </summary>
        </member>
        <member name="M:WolfCurses.IWindow.RemoveWindowNextTick">
            <summary>
                Sets the flag for this game Windows to be removed the next time it is ticked by the simulation.
            </summary>
        </member>
        <member name="M:WolfCurses.IWindow.OnRenderWindow">
            <summary>
                Grabs the text user interface string that will be used for debugging on console application.
            </summary>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:WolfCurses.IWindow.SendCommand(System.String)">
            <summary>
                Intended to be used by base simulation to pass along the input buffer after the user has typed several characters
                into the input buffer. This is used when allowing the user to input custom strings like names for their party
                members.
            </summary>
            <param name="input">The input.</param>
        </member>
        <member name="M:WolfCurses.IWindow.OnWindowPostCreate">
            <summary>
                Called after the Windows has been added to list of modes and made active.
            </summary>
        </member>
        <member name="M:WolfCurses.IWindow.OnWindowActivate">
            <summary>
                Called when the Windows manager in simulation makes this Windows the currently active game Windows. Depending on
                order of
                modes this might not get called until the Windows is actually ticked by the simulation.
            </summary>
        </member>
        <member name="M:WolfCurses.IWindow.OnWindowAdded">
            <summary>
                Fired when the simulation adds a game Windows that is not this Windows. Used to execute code in other modes that
                are not
                the active Windows anymore one last time.
            </summary>
        </member>
        <member name="T:WolfCurses.Menu.IMenuChoice`1">
            <summary>
                Defines a choice in the dynamic action selection system for a given game Windows. This is intended to be used by a
                wrapper for menu choices that aggregates all of the possible actions a given game Windows can make while it is
                active
                in the simulation.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:WolfCurses.Menu.IMenuChoice`1.Command">
            <summary>
                Gets or sets the command.
            </summary>
        </member>
        <member name="P:WolfCurses.Menu.IMenuChoice`1.Description">
            <summary>
                Gets or sets the description.
            </summary>
        </member>
        <member name="P:WolfCurses.Menu.IMenuChoice`1.Action">
            <summary>
                Gets or sets the action.
            </summary>
        </member>
        <member name="T:WolfCurses.Menu.MenuChoice`1">
            <summary>
                Defines a choice in the dynamic action selection system for a given game mode. This is intended to be used by a
                wrapper for menu choices that aggregates all of the possible actions a given game mode can make while it is active
                in the simulation.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WolfCurses.Menu.MenuChoice`1.#ctor(`0,System.Action,System.String)">
            <summary>Initializes a new instance of the <see cref="T:WolfCurses.Menu.MenuChoice`1" /> class.</summary>
            <param name="command">The command.</param>
            <param name="action">The action.</param>
            <param name="description">The description.</param>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="P:WolfCurses.Menu.MenuChoice`1.Command">
            <summary>
                Gets or sets the command.
            </summary>
        </member>
        <member name="P:WolfCurses.Menu.MenuChoice`1.Description">
            <summary>
                Gets or sets the description.
            </summary>
        </member>
        <member name="P:WolfCurses.Menu.MenuChoice`1.Action">
            <summary>
                Gets or sets the action.
            </summary>
        </member>
        <member name="T:WolfCurses.Window`2">
            <summary>
                Facilitates the ability to control the entire simulation with the passes interface reference. Server simulation
                keeps track of all currently loaded game modes and will only tick the top-most one so they can be stacked and clear
                out until there are none.
            </summary>
            <typeparam name="TCommands">Enumeration of all the available commands this window supports.</typeparam>
            <typeparam name="TData">Window data class that will be used for this window.</typeparam>
        </member>
        <member name="F:WolfCurses.Window`2._simUnit">
            <summary>
                Reference to simulation core which houses the window manager and other core modules.
            </summary>
        </member>
        <member name="F:WolfCurses.Window`2._menuActions">
            <summary>
                Reference for mappings to go from enumeration value to action.
            </summary>
        </member>
        <member name="F:WolfCurses.Window`2._menuChoiceCount">
            <summary>
                Keeps track of the total number of menu choices that are currently available to this window.
            </summary>
        </member>
        <member name="F:WolfCurses.Window`2._menuCommands">
            <summary>
                Reference to all of the possible commands that this game Windows supports routing back to the game simulation that
                spawned it.
            </summary>
        </member>
        <member name="F:WolfCurses.Window`2._menuFooter">
            <summary>
                Holds the footer text that we will place below menu but before input buffer text.
            </summary>
        </member>
        <member name="F:WolfCurses.Window`2._menuHeader">
            <summary>
                Holds the prefix text that can go above the menu text if it exists.
            </summary>
        </member>
        <member name="F:WolfCurses.Window`2._menuMappings">
            <summary>
                Reference for mappings to go from string data into a valid loaded input enumeration value.
            </summary>
        </member>
        <member name="F:WolfCurses.Window`2._menuPrompt">
            <summary>
                Holds the text user interface data that we are going to eventually render out to the user.
            </summary>
        </member>
        <member name="M:WolfCurses.Window`2.#ctor(WolfCurses.SimulationApp)">
            <summary>
                Initializes a new instance of the <see cref="T:WolfCurses.Window`2" /> class.
            </summary>
            <param name="simUnit">Core simulation which is controlling the form factory.</param>
        </member>
        <member name="P:WolfCurses.Window`2.Form">
            <summary>
                Current game Windows state that is being ticked when this Windows is ticked by the underlying simulation.
            </summary>
        </member>
        <member name="P:WolfCurses.Window`2.MenuHeader">
            <summary>
                Defines the text prefix which will go above the menu, used to show any useful information the game Windows might
                need to at the top of menu selections.
            </summary>
        </member>
        <member name="P:WolfCurses.Window`2.MenuFooter">
            <summary>
                Similar to the header this will define some text that should go below the menu selection but before the user input
                field.
            </summary>
        </member>
        <member name="P:WolfCurses.Window`2.ShowCommandNamesInMenu">
            <summary>
                Determines if the input names for the particular action should be printed out alongside the number the user can
                press to control that particular enum.
            </summary>
        </member>
        <member name="P:WolfCurses.Window`2.UserData">
            <summary>
                Intended to be overridden in abstract class by generics to provide method to return object that contains all the
                data for parent game Windows.
            </summary>
        </member>
        <member name="P:WolfCurses.Window`2.Commands">
            <summary>
                Because of how generics work in C# we need to have the ability to override a method in implementing classes to get
                back the correct commands for the implementation from abstract class inheritance chain. On the bright side it
                enforces the commands returned to be of the specified enum in generics.
            </summary>
            <remarks>
                http://stackoverflow.com/a/5042675
            </remarks>
            <returns>
                Formatting list of enumeration values that can be iterated over as array.
            </returns>
        </member>
        <member name="M:WolfCurses.Window`2.CompareTo(WolfCurses.Window{`0,`1})">
            <summary>The compare to.</summary>
            <param name="other">The other.</param>
            <returns>The <see cref="T:System.Int32" />.</returns>
        </member>
        <member name="M:WolfCurses.Window`2.Equals(WolfCurses.Window{`0,`1},WolfCurses.Window{`0,`1})">
            <summary>The equals.</summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="M:WolfCurses.Window`2.GetHashCode(WolfCurses.Window{`0,`1})">
            <summary>The get hash code.</summary>
            <param name="obj">The obj.</param>
            <returns>The <see cref="T:System.Int32" />.</returns>
        </member>
        <member name="M:WolfCurses.Window`2.Equals(WolfCurses.Window{`0,`1})">
            <summary>The equals.</summary>
            <param name="other">The other.</param>
            <returns>The <see cref="T:System.Boolean" />.</returns>
        </member>
        <member name="P:WolfCurses.Window`2.WolfCurses#IWindow#UserData">
            <summary>
                Intended to be overridden in abstract class by generics to provide method to return object that contains all the
                data for parent game Windows.
            </summary>
        </member>
        <member name="P:WolfCurses.Window`2.ShouldRemoveMode">
            <summary>
                Determines if the game Windows should not be ticked if it is active but instead removed. The Windows when set to
                being
                removed will not actually be removed until the simulation attempts to tick it and realizes that this is set to true
                and then it will be removed.
            </summary>
        </member>
        <member name="M:WolfCurses.Window`2.RemoveWindowNextTick">
            <summary>
                Sets the flag for this game Windows to be removed the next time it is ticked by the simulation.
            </summary>
        </member>
        <member name="P:WolfCurses.Window`2.AcceptsInput">
            <summary>
                Determines if user input is currently allowed to be typed and filled into the input buffer.
            </summary>
            <remarks>Default is FALSE. Setting to TRUE allows characters and input buffer to be read when submitted.</remarks>
        </member>
        <member name="P:WolfCurses.Window`2.CurrentForm">
            <summary>
                Holds the current state which this Windows is in, a Windows will cycle through available states until it is
                finished and
                then detach.
            </summary>
        </member>
        <member name="M:WolfCurses.Window`2.ClearForm">
            <summary>
                Removes the current state from the active game Windows.
            </summary>
        </member>
        <member name="M:WolfCurses.Window`2.OnRenderWindow">
            <summary>
                Fired by simulation when it wants to request latest text user interface data for the game Windows, this is used to
                display to user console specific information about what the simulation wants.
            </summary>
            <returns>
                The windows text user interface<see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:WolfCurses.Window`2.SendCommand(System.String)">
            <summary>
                Fired by messaging system or user interface that wants to interact with the simulation by sending string input
                that should be able to be parsed into a valid input that can be run on the current game Windows.
            </summary>
            <param name="input">Passed in input from controller, text was trimmed but nothing more.</param>
        </member>
        <member name="M:WolfCurses.Window`2.OnWindowPostCreate">
            <summary>
                Called after the Windows has been added to list of modes and made active.
            </summary>
        </member>
        <member name="M:WolfCurses.Window`2.OnWindowActivate">
            <summary>
                Called when the Windows manager in simulation makes this Windows the currently active game Windows. Depending on
                order of modes this might not get called until the Windows is actually ticked by the simulation.
            </summary>
        </member>
        <member name="M:WolfCurses.Window`2.OnWindowAdded">
            <summary>
                Fired when the simulation adds a game Windows that is not this Windows. Used to execute code in other modes that
                are not
                the active Windows anymore one last time.
            </summary>
        </member>
        <member name="M:WolfCurses.Window`2.Compare(WolfCurses.IWindow,WolfCurses.IWindow)">
            <summary>The compare.</summary>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
            <returns>The <see cref="T:System.Int32" />.</returns>
        </member>
        <member name="M:WolfCurses.Window`2.CompareTo(WolfCurses.IWindow)">
            <summary>The compare to.</summary>
            <param name="other">The other.</param>
            <returns>The <see cref="T:System.Int32" />.</returns>
        </member>
        <member name="M:WolfCurses.Window`2.SetForm(System.Type)">
            <summary>Creates and adds the specified type of state to currently active game Windows.</summary>
            <param name="stateType">The state Type.</param>
            <remarks>If Windows does not support given state, an argument exception will be thrown!</remarks>
        </member>
        <member name="M:WolfCurses.Window`2.OnTick(System.Boolean,System.Boolean)">
            <summary>
                Called when the simulation is ticked by underlying operating system, game engine, or potato. Each of these system
                ticks is called at unpredictable rates, however if not a system tick that means the simulation has processed enough
                of them to fire off event for fixed interval that is set in the core simulation by constant in milliseconds.
            </summary>
            <remarks>Default is one second or 1000ms.</remarks>
            <param name="systemTick">
                TRUE if ticked unpredictably by underlying operating system, game engine, or potato. FALSE if
                pulsed by game simulation at fixed interval.
            </param>
            <param name="skipDay">
                Determines if the simulation has force ticked without advancing time or down the trail. Used by
                special events that want to simulate passage of time without actually any actual time moving by.
            </param>
        </member>
        <member name="M:WolfCurses.Window`2.OnFormChange">
            <summary>
                Allows underlying parent game Windows to the state understand it changed.
            </summary>
        </member>
        <member name="M:WolfCurses.Window`2.AddCommand(System.Action,`0,System.String)">
            <summary>
                Adds a new game Windows menu selection that will be available to send as a input for this specific game
                Windows.
            </summary>
            <param name="action">Method that will be run when the choice is made.</param>
            <param name="command">Associated input that will trigger the respective action in the active game Windows.</param>
            <param name="description">Text that will be shown to user so they know what the choice means.</param>
        </member>
        <member name="M:WolfCurses.Window`2.RefreshCommandMappings">
            <summary>
                Recalculates all of the commands mappings giving them a clear path from a string input
            </summary>
        </member>
        <member name="M:WolfCurses.Window`2.AddCommand(System.Action,`0)">
            <summary>
                Adds a new game menu selection with description pulled from attribute on input enumeration. This override is not
                meant for menu selections where you want to manually specify the description of the menu item, this way it will be
                pulled from enum description attribute.
            </summary>
            <param name="action">Method that will be run when the choice is made.</param>
            <param name="command">Associated input that will trigger the respective action in the active game Windows.</param>
        </member>
        <member name="M:WolfCurses.Window`2.ClearCommands">
            <summary>
                Forces the menu choices to be cleared out, this is used by modes like the store to refresh the data shown in the
                menu to match purchasing decisions.
            </summary>
        </member>
        <member name="M:WolfCurses.Window`2.OnModeRemoved">
            <summary>Fired when this game Windows is removed from the list of available and ticked modes in the simulation.</summary>
        </member>
        <member name="M:WolfCurses.Window`2.ToString">
            <summary>
                The to string.
            </summary>
            <returns>
                The <see cref="T:System.String" />.
            </returns>
        </member>
        <member name="M:WolfCurses.Window`2.GetHashCode">
            <summary>
                The get hash code.
            </summary>
            <returns>
                The <see cref="T:System.Int32" />.
            </returns>
        </member>
        <member name="T:WolfCurses.WindowData">
            <summary>
                Used to make sure that every Windows info class has a basic data structure that we can rely on for creating it via
                Windows factory.
            </summary>
        </member>
        <member name="T:WolfCurses.WindowFactory">
            <summary>
                Factory pattern for creating game modes on the fly during runtime based on enumeration input parameter.
            </summary>
        </member>
        <member name="F:WolfCurses.WindowFactory._simUnit">
            <summary>
                Reference to running game simulation we will need to pass along to created window instances.
            </summary>
        </member>
        <member name="M:WolfCurses.WindowFactory.#ctor(WolfCurses.SimulationApp)">
            <summary>
                Initializes a new instance of the <see cref="T:WolfCurses.WindowFactory" /> class.
                Creates a new Windows factory that will look over the application for all known game types and create reference
                list which we can use to get instances of a given Windows by asking for it.
            </summary>
            <param name="simUnit">Core simulation which is controlling the window factory.</param>
        </member>
        <member name="P:WolfCurses.WindowFactory.Windows">
            <summary>
                Reference dictionary for all the found game modes that have the game Windows attribute on top of them which the
                simulation will want to be able to create instances of when running.
            </summary>
        </member>
        <member name="M:WolfCurses.WindowFactory.CreateWindow(System.Type)">
            <summary>
                Change to new view Windows when told that internal logic wants to display view options to player for a specific set
                of data in the simulation.
            </summary>
            <param name="window">The windows.</param>
            <returns>New game Windows instance based on the Windows input parameter.</returns>
        </member>
        <member name="M:WolfCurses.WindowFactory.Destroy">
            <summary>
                Called when the simulation is closing down.
            </summary>
        </member>
    </members>
</doc>
